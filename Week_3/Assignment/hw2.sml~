(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string (s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)
	     
(* Q1a
Don't forget earlier part of list that appears before the string
e.g., all_except_option("Fred", ["Frederick", "Fred", "F"]) =>
["Frederick", "F"] *)
fun all_except_option (_ ,[]) = NONE
  | all_except_option (str, hd::tl) = if same_string (str,hd) then SOME (tl)
				     else case all_except_option (str,tl) of
					      SOME (lst) => SOME (hd::lst)
					    | NONE => NONE
					      				       				
(* Q1b - use part(a) and list-append function @ *)
fun get_substitutions1 ([],s) = []
  | get_substitutions1 (lst::lsts,s) =
    case all_except_option (s,lst) of
	SOME l1 => l1 @ get_substitutions1 (lsts,s)
      | NONE  => get_substitutions1 (lsts,s)
						
    						       									  
(* Q1c *)
fun get_substitutions2 (subs,s) =
    let fun aux (subs,s,acc) =
	    case subs of
		[] => acc
	      | lst::lsts => case all_except_option(s,lst) of
				 SOME l1 => aux(lsts,s,l1@acc)
			       | NONE => aux(lsts,s,acc)
    in
	aux(subs,s,[])
    end
				 
		

(* Q1d *)
(* takes substitutions and full name, returns a list of full names produced 
- by substituting for only the first names with names resulting from
- passing substitutions into function from  1b or 1c
Note: list of full names should include the full name 

similar_names([],
		{first="Fred",middle="W",last="Smith"}) *)
	
fun similar_names (subs, {first=f,middle=m,last=l}) =
    let val name = {first=f,middle=m,last=l}
	fun substitute lstnames =
	    case lstnames of
		[] => []
	     |  x::xs => {first=x,middle=m,last=l}::substitute(xs)
    in
	name::substitute(get_substitutions2 (subs,f))
    end
			     
	     
				       
	
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)

(* Q2a *)
fun card_color (Spades,_) = Black
  | card_color (Clubs,_) = Black
  | card_color (_,_) = Red

(* Q2b *)
fun card_value (_,Num i) = i
  | card_value (_,Ace) = 11
  | card_value (_,_) = 10 

(* Q2c *)
fun remove_card ([],c,e) = raise e
  | remove_card (cd::cds,c,e) = if cd=c then cds
				else cd::remove_card (cds,c,e)
				    
(* Q2d *)
fun all_same_color ([]) = true
  | all_same_color (c::[]) = true
  | all_same_color (c1::(c2::cds)) = card_color (c1) = card_color(c2)
				     andalso all_same_color(c2::cds)
    
(* Q2e *)
fun sum_cards (cards) =
    let fun aux (cards,acc) =
	    case cards of
		[] => acc
	      | c1::rest => aux (rest, acc + card_value (c1))
    in
	aux (cards,0)
    end

(* Q2f *)
fun score (held_cards,goal) = 
    let val sum = sum_cards (held_cards)
	val prelim_score = if sum > goal then 3 * (sum - goal)
			   else (goal - sum)
    in
	case all_same_color (held_cards) of
	    true => prelim_score div 2
	  | false  => prelim_score
	    
    end

(* Q2g
If I put (todraw,moves,held) as the first case instead, I get this error. Please see below.
-----------------------------------
Error: types of rules do not agree [tycon mismatch]

earlier rule(s): _ list -> int
this rule: 'Z list * 'Y * 'X -> int
in rule:
   (nil,_,_) => score (held,goal)
----------------------------------
Why does this happen?  *)
	
fun officiate (card_list,moves,goal) =
    let fun play (todraw,moves,held) = (* use local recursive helper to represent current state of game *)
	    case (todraw,moves,held) of
		(_,[],_) => score (held,goal) (* 0 moves *)
	      | ([],_,_) => score (held,goal) (* 0 cards to draw *)
	      | (todraw,moves,held) => if sum_cards (held) > goal then score (held,goal) 
				       else case moves of (* play continues *)
						Discard c::ms => play (todraw,ms,remove_card (held,c,IllegalMove)) (* smaller held, next move *)
					      | Draw::ms => case todraw of
								c::cs => play (remove_card (todraw,c,IllegalMove),ms,c::held)
							     (* larger held, smaller todraw, next move *)
							     |  [] => score (held,goal)
    in
	play (card_list,moves,[]) (* held starts empty*)
    end


    
